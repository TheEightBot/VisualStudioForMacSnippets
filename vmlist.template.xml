<?xml version="1.0" encoding="utf-8"?>
<CodeTemplates version="3.0">
  <CodeTemplate version="2.0">
    <Header>
      <_Group>C#</_Group>
      <Version />
      <MimeType>text/x-csharp</MimeType>
      <Shortcut>vmlist</Shortcut>
      <_Description>vm template for lists</_Description>
      <TemplateType>Unknown</TemplateType>
    </Header>
    <Variables>
      <Variable name="Name">
        <Default>MyClass</Default>
      </Variable>
      <Variable name="ModelName">
        <Default>object</Default>
      </Variable>
    </Variables>
    <Code><![CDATA[public class $Name$ : ViewModelBase<$Name$> 
{
//using System;
//using System.Reactive;
//using System.Reactive.Linq;
//using System.Runtime.Serialization;
//using System.Threading.Tasks;
//using EightBot.BigBang.Extensions;
//using EightBot.BigBang.ViewModel;
//using FluentValidation;
//using ReactiveUI;
//using Splat;

    public override string Title => string.Empty; 
 

    public ReactiveList<$ModelName$> Data = new ReactiveList<$ModelName$>();

    public override AbstractValidator<$Name$> Validator => null;
 
    public $Name$() {}

    protected override void Initialize()
    {
         base.Initialize();
    }

    ReactiveCommand<$TParam$, $TReturn$> _$someCommand$;

    public ReactiveCommand<$TParam$, $TReturn$> $SomeCommand$
    {
        get => _$someCommand$; 
        private set => this.RaiseAndSetIfChanged(ref _$someCommand$, value); 
    }
 
    protected override void RegisterObservables()
    {
        InitializeData =
            ReactiveCommand
                .Create<Unit, unit>(_ => 
                {
                    using (Data.SuppressChangeNotifications())
                    {
                        Data.Clear();
                    }     

                    return Unit.Default;
                })
                .DisposeWith(ViewModelBindings);
    }
}]]></Code>
  </CodeTemplate>
</CodeTemplates>