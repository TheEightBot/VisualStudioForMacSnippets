<?xml version="1.0" encoding="utf-8"?>
<CodeTemplates version="3.0">
  <CodeTemplate version="2.0">
    <Header>
      <_Group>C#</_Group>
      <Version />
      <MimeType>text/x-csharp</MimeType>
      <Shortcut>uipopup</Shortcut>
      <_Description>rg plugin popup base ui</_Description>
      <TemplateType>Unknown</TemplateType>
    </Header>
    <Variables>
      <Variable name="MyClass">
        <Default>notset</Default>
      </Variable>
    </Variables>
    <Code><![CDATA[public class $MyClass : PopupPageBase<ViewModels.$MyClass>
{
    Grid _mainLayout;

//using System;
//using System.Reactive.Linq;
//using Aurora.Controls;
//using EightBot.BigBang.Extensions;
//using EightBot.BigBang.XamForms.Extensions;
//using EightBot.BigBang.XamForms.Pages;
//using EightBot.BigBang.XamForms.PopUp;
//using EightBot.BigBang.XamForms.PopUp.Extensions;
//using EightBot.BigBang.XamForms.Views;
//using ReactiveUI;
//using Rg.Plugins.Popup.Animations;
//using Xamarin.Forms;
//using System.Reactive.Disposables;

    public $MyClass()
    {
        ViewModel = new ViewModels.$MyClass();
    }

    protected override void SetupUserInterface()
    {
        this.Animation =
            new FadeAnimation
            {
                EasingIn = Easing.CubicIn,
                EasingOut = Easing.CubicOut
            };

        this.CloseWhenBackgroundIsClicked = true;

        _mainLayout = new Grid
        {
            BackgroundColor = Color.Transparent,
            HorizontalOptions = LayoutOptions.FillAndExpand,
            VerticalOptions = LayoutOptions.FillAndExpand,
            ColumnSpacing = Values.Sizes.Padding,
            RowSpacing = Values.Sizes.Padding,
            Padding = Values.Sizes.DoublePadding,
            ColumnDefinitions = new ColumnDefinitionCollection {
                    new ColumnDefinition { Width = GridLength.Star },
                    new ColumnDefinition { Width = GridLength.Star },
                },
                RowDefinitions = new RowDefinitionCollection {
                    new RowDefinition { Height = GridLength.Auto },
                    new RowDefinition { Height = GridLength.Auto },
                    new RowDefinition { Height = GridLength.Auto },
                }
        };

        Content = new CardViewLayout
        {
            VerticalOptions = LayoutOptions.CenterAndExpand,
            HorizontalOptions = LayoutOptions.CenterAndExpand,
            BackgroundColor = Values.Colors.LightPageBackground,
            Content = _mainLayout,
            Elevation = Values.Sizes.PopupElevation,
            CornerRadius = Values.Sizes.RoundedCornerRadius,
        };
    }

    protected override void BindControls()
    {
        this.WhenAnyValue(x => x.ViewModel)
            .IsNotNull()
            .SelectUnit()
            .InvokeCommand(this, x => x.ViewModel.InitializeData)
            .DisposeWith(ControlBindings);
    }
}]]></Code>
  </CodeTemplate>
</CodeTemplates>