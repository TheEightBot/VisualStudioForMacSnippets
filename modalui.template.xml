<?xml version="1.0" encoding="utf-8"?>
<CodeTemplates version="3.0">
  <CodeTemplate version="2.0">
    <Header>
      <_Group>C#</_Group>
      <Version />
      <MimeType>text/x-csharp</MimeType>
      <Shortcut>modalui</Shortcut>
      <_Description>Creates a detail modal page</_Description>
      <TemplateType>Unknown</TemplateType>
    </Header>
    <Variables>
      <Variable name="SomeModal">
        <Default>notset</Default>
      </Variable>
    </Variables>
    <Code><![CDATA[public class $SomeModal$ : ContentPageBase<ViewModels.$SomeModal$>
    { 

//using System;
//using System.Reactive.Linq;
//using EightBot.BigBang.Extensions;
//using EightBot.BigBang.XamForms.Extensions;
//using EightBot.BigBang.XamForms.Pages;
//using EightBot.BigBang.XamForms.Views;
//using ReactiveUI;
//using Xamarin.Forms;

        ToolbarItem _close;

        Grid _mainLayout;

        public $SomeModal$()
        {
            ViewModel = new ViewModels.$SomeModal$();
        }

        protected override void SetupUserInterface()
        {
            /* Navigation Bar */
            NavigationPage.SetHasNavigationBar(this, true);

            _close = new ToolbarItem
            {
                Text = "Close"
            };
            this.ToolbarItems.Add(_close);

            /* Layout */

            _mainLayout = new Grid
            {
                BackgroundColor = Color.Transparent,
                HorizontalOptions = LayoutOptions.FillAndExpand,
                VerticalOptions = LayoutOptions.FillAndExpand,
                Margin = new Thickness(Values.Layout.Padding, Values.Layout.TriplePadding, Values.Layout.Padding, Values.Layout.Padding),
                ColumnSpacing = Values.Layout.Padding,
                RowSpacing = Values.Layout.HalfPadding,
                ColumnDefinitions = new ColumnDefinitionCollection {
                    new ColumnDefinition { Width = GridLength.Star },
                },
                RowDefinitions = new RowDefinitionCollection {
                    new RowDefinition { Height = GridLength.Star },
                    new RowDefinition { Height = GridLength.Star }
                }
            };

            Content = _mainLayout;
        }

        protected override void BindControls()
        {
            this.OneWayBind(ViewModel, x => x.Title, c => c.Title)
                .DisposeWith(ControlBindings);

            this.BindCommand(ViewModel, x => x.Close, x => x._close)
                .DisposeWith(ControlBindings);

            this.WhenAnyObservable(x => x.ViewModel.Close)
                .ObserveOn(RxApp.MainThreadScheduler)
                .Subscribe(async _ => {
                    await this.Navigation.PopModalAsync(); 
                })
                .DisposeWith(ControlBindings);
            
            this.WhenAnyValue(x => x.ViewModel)
                .IsNotNull()
                .InvokeCommand(this, x => x.ViewModel.InitializeData)
                .DisposeWith(ControlBindings);
        }
    }]]></Code>
  </CodeTemplate>
</CodeTemplates>